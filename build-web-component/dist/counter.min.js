(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var styles = "\n    :host {\n        position: relative;\n        font-family: sans-serif;\n    }\n\n    #counter-increment, #counter-decrement {\n        width: 60px;\n        height: 30px;\n        margin: 20px;\n        background: red;\n        border: 1px solid black;\n    }\n\n    #counter-value {\n        font-weight: bold;\n    }\n";

  var tmpl = document.createElement('template');
  tmpl.innerHTML = "\n    <style>".concat(styles, "</style>\n    <h3>Counter build</h3>\n    <slot name='counter-content'>Button</slot>\n    <button id='counter-increment'> - </button>\n    <span id='counter-value'> 0 </span>\n    <button id='counter-decrement'> + </button>\n");

  var CounterElement =
  /*#__PURE__*/
  function (_HTMLElement) {
    _inherits(CounterElement, _HTMLElement);

    function CounterElement() {
      var _this;

      _classCallCheck(this, CounterElement);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CounterElement).call(this)); // Initialise the counter value

      _this.counter = 0; // We attach an open shadow root to the custom element

      var shadowRoot = _this.attachShadow({
        mode: 'open'
      }); //shadowRoot.appendChild(style.cloneNode(true));


      shadowRoot.appendChild(tmpl.content.cloneNode(true)); // We can query the shadow root for internal elements
      // in this case the button

      _this.incrementButton = _this.shadowRoot.querySelector('#counter-increment');
      _this.decrementButton = _this.shadowRoot.querySelector('#counter-decrement');
      _this.counterValue = _this.shadowRoot.querySelector('#counter-value'); // We can bind an event which references one of the class methods

      _this.incrementButton.addEventListener("click", _this.decrement.bind(_assertThisInitialized(_this)));

      _this.decrementButton.addEventListener("click", _this.increment.bind(_assertThisInitialized(_this)));

      return _this;
    }

    _createClass(CounterElement, [{
      key: "increment",
      value: function increment() {
        this.counter++;
        this.invalidate();
      }
    }, {
      key: "decrement",
      value: function decrement() {
        this.counter--;
        this.invalidate();
      } // Call when the counter changes value

    }, {
      key: "invalidate",
      value: function invalidate() {
        this.counterValue.innerHTML = this.counter;
      }
    }]);

    return CounterElement;
  }(_wrapNativeSuper(HTMLElement)); // This is where the actual element is defined for use in the DOM


  customElements.define('counter-element', CounterElement);

}());
